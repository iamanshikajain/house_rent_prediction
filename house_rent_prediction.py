# -*- coding: utf-8 -*-
"""house_rent_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rI-605FDoejuz0XqlaTHul3qt8kXjevp
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go

import sklearn
from sklearn.preprocessing import OneHotEncoder

data = pd.read_csv("/content/train.csv")
print(data.head())

print(data.isnull().sum())

print(data.describe())

print(f"Mean Rent:{data.rent.mean()}")
print(f"Median Rent:{data.rent.median()}")
print(f"Highest Rent:{data.rent.max()}")
print(f"Lowest Rent:{data.rent.min()}")

"""Now letâ€™s have a look at the rent of the houses in different cities according to the number of bedrooms, halls, and kitchens:"""

figure = px.bar(data, x=data["locality"],
                y = data["rent"],
                color = data["type"],
                title="Rent in Different localities according to BHK")
figure.show()

figure = px.bar(data, x=data["locality"],
                y = data["rent"],
                color = data["furnishing"],
            title="Rent in Different Cities According to Furnishing Status")
figure.show()

figure = px.bar(data, x=data["locality"],
                y = data["rent"],
                color = data["property_size"],
            title="Rent in Different Cities According to Size")
figure.show()

localities = data["locality"].value_counts()
label = localities.index
counts = localities.values
colors = ['gold', 'lightgreen']

fig = go.Figure(data=[go.Pie(labels=label, values=counts, hole=0.5)])
fig.update_layout(title_text='number of houses availanle for rent')
fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=30,
                  marker=dict(colors=colors, line=dict(color='black', width=3)))
fig.show()

# Preference of tenant
tenant = data["lease_type"].value_counts()
label = tenant.index
counts = tenant.values
color = ['gold', 'lightgreen']

fig = go.Figure(data=[go.Pie(labels=label, values=counts, hole=0.5)])
fig.update_layout(title_text='preferred tenant for rent')
fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=30,
                  marker=dict(colors=colors, line=dict(color='black', width=3)))
fig.show()

parking = data["parking"].value_counts()
label = parking.index
counts = parking.values
color = ['gold', 'lightgreen']

fig = go.Figure(data=[go.Pie(labels=label, values=counts, hole=0.5)])
fig.update_layout(title_text='preferred parking for vehicles')
fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=30,
                  marker=dict(colors=colors, line=dict(color='black', width=3)))
fig.show()

facing = data["facing"].value_counts()
label = facing.index
counts = facing.values
color = ['gold', 'lightgreen']

fig = go.Figure(data=[go.Pie(labels=label, values=counts, hole=0.5)])
fig.update_layout(title_text='preferred side facing')
fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=30,
                  marker=dict(colors=colors, line=dict(color='black', width=3)))
fig.show()

water_supply = data["water_supply"].value_counts()
label = water_supply.index
counts = water_supply.values
color = ['gold', 'lightgreen']

fig = go.Figure(data=[go.Pie(labels=label, values=counts, hole=0.5)])
fig.update_layout(title_text='preferred water_supply')
fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=30,
                  marker=dict(colors=colors, line=dict(color='black', width=3)))
fig.show()

"""CONVERTING ALL THE CATEGORICAL FEATURES INTO NUMERICAL FEATURES"""

data["furnishing"] = data["furnishing"].map({"NOT_FURNISHED": 0,
                                             "SEMI_FURNISHED": 1,
                                             "FULLY_FURNISHED": 2})

data["lease_type"] = data["lease_type"].map({"FAMILY": 2, "ANYONE": 1, "BACHELOR": 3})

data["type"] = data["type"].map({"BHK1": 1, "BHK2": 2, "BHK3": 3, "BHK4": 4, "BHK4PLUS": 5, "RK1": 6 })

data["water_supply"] = data["water_supply"].map({"CORP_BORE": 1, "CORPORATION": 2, "BOREWELL": 3})

data["facing"] = data["facing"].map({"N": 1, "E":2, "S": 3, "W": 4, "NW": 5, "NE": 6, "SE": 7, "SW":8})

data["building_type"] = data["building_type"].map({"AP": 1, "IH": 2, "IF": 3})

print(data.head())

data.drop(columns=['id', 'activation_date'])

data[['LIFT','GYM','INTERNET','AC','CLUB','INTERCOM','POOL','CPA','FS','SERVANT','SECURITY','SC','GP','PARK','RWH','STP','HK','PB','VP']] = data.amenities.str.split(",", expand=True)

print(data)

data.drop(columns=['amenities'])

data["SERVANT"] = data["SERVANT"].map({'"SERVANT":false': 0, '"SERVANT":true': 1})
data["SECURITY"] = data["SECURITY"].map({'"SECURITY":false': 0, '"SECURITY":true':1})
data["SC"] = data["SC"].map({'"SC":false': 0, '"SC":true': 1})
data["GP"] = data["GP"].map({'"GP":false': 0, '"GP":true':1})
data["PARK"] = data["PARK"].map({'"PARK":false': 0, '"PARK":true':1})
data["RWH"] = data["RWH"].map({'"RWH":false': 0, '"RWH":true': 1})
data["STP"] = data["STP"].map({'"STP":false': 0, '"STP":true':1})
data["HK"] = data["HK"].map({'"HK":false': 0, '"HK":true': 1})
data["PB"] = data["PB"].map({'"PB":false': 0, '"PB":true':1})
data["LIFT"] = data["LIFT"].map({'"LIFT":false': 0, '"LIFT":true': 1})
data["GYM"] = data["GYM"].map({'"GYM":false': 0, '"GYM":true':1})
data["INTERNET"] = data["INTERNET"].map({'"INTERNET":false': 0, '"INTERNET":true': 1})
data["AC"] = data["AC"].map({'"AC":false': 0, '"AC":true':1})
data["CLUB"] = data["CLUB"].map({'"CLUB":false': 0, '"CLUB":true':1})
data["INTERCOM"] = data["INTERCOM"].map({'"INTERCOM":false': 0, '"INTERCOM":true': 1})
data["POOL"] = data["POOL"].map({'"POOL":false': 0, '"POOL":true':1})
data["CPA"] = data["CPA"].map({'"CPA":false': 0, '"CPA":true': 1})
data["FS"] = data["FS"].map({'"FS":false': 0, '"FS":true':1})
data["VP"] = data["VP"].map({'"VP":false}': 0, '"VP":true}': 1})

print(data)

data.drop(columns=['id', 'activation_date','locality'])

localities = data["locality"].value_counts()
labels = localities.index
counts = localities.values
plt.barh(labels,counts)
plt.xlabel("labels")
plt.ylabel('counts')
plt.title('locality')
plt.show()

len(labels)
print(len(labels))

print(data.isnull().sum())

num_columns = len(data.columns)
pd.set_option("display.max_columns", num_columns)
data.head()

data.shape[0]

data.shape[1]

feature_names = data.columns.tolist()
feature_names.remove('amenities')
feature_names.remove('id')
feature_names.remove('activation_date')

for column in feature_names:
    print (column)

data.locality.tolist()

data.locality.shape[0]

from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()
label_encoder.fit(data['locality'])
data['locality'] = label_encoder.transform(data['locality']).tolist()

print(data['locality'])

from sklearn.model_selection import train_test_split
x_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=0.25, random_state = 0)

# Feature scaling with StandardScaler
from sklearn.preprocessing import StandardScaler
scale_x_std = StandardScaler()
x_train = scale_x_std.fit_transform(x_train)
x_test = scale_x_std.transform(x_test)

"""# New section"""

from sklearn.model_selection import train_test_split
x = np.array(data[["type", "latitude", "longitude", "lease_type", "gym","lift","swimming_pool","negotiable","furnishing","parking","property_size","property_age","bathroom","facing","cup_board",
                   "floor","total_floor","LIFT","GYM","INTERNET","AC","CLUB","INTERCOM","POOL","CPA","FS","SERVANT","SECURITY","SC","GP","PARK","RWH","STP","HK","PB","VP","water_supply","building_type","balconies"]])
y = np.array(data[["rent"]])

xtrain, xtest, ytrain, ytest = train_test_split(x, y,
                                                test_size=0.10,
                                                random_state=42)

